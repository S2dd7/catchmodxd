Name,Displayed As,Symbol,Description,Stacks?,Remove at End Turn?,Remove at Start Turn?,Invisible?,Blocked by Reduce?,Script: When inflicted,Script: On any status infliction,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: After Combat,Script: On damage inflicted,Script: On damage taken,Script: On status remove
ncr_error,Error,ncr_error,At the start of your turn[;] a random item errors out[;]|rendering it unusable for that turn.,YES,YES,NO,NO,YES,if(self.dicepool.length > 0) { var erroramt = inflicted_value; var erroreq = []; var optimalerroreq = []; if(self.equipment.length > 0) { for(eq in self.equipment) { if(eq.hastag(~errorimmune~) == false && eq.skillcard == ~~ && eq.isready()) { erroreq.push(eq); optimalerroreq.push(eq); /*don't avoid erroring shocked equipment if error inflicted midturn*/ } } while(erroramt > 0) { var pickedeq = null; if(optimalerroreq.length > 0) pickedeq = rand(optimalerroreq); else pickedeq = rand(erroreq); pickedeq.removedice(); roboterror(self|[pickedeq]); optimalerroreq.remove(pickedeq); erroreq.remove(pickedeq); if(erroreq.length < 1) break; erroramt--; } if (self.layout == ~DECK~) { Deck.advance(0.8); } } },,,var erroramt = status.value; var erroreq = []; var optimalerroreq = []; if(self.equipment.length > 0) { for(eq in self.equipment) { if(eq.hastag(~errorimmune~) == false && eq.skillcard == ~~ && eq.isready()) { erroreq.push(eq); if(!eq.weakened && eq.shockedsetting == 0) optimalerroreq.push(eq); } } while(erroramt > 0) { var pickedeq = null; if(optimalerroreq.length > 0) pickedeq = rand(optimalerroreq); else pickedeq = rand(erroreq); pickedeq.removedice(); roboterror(self|[pickedeq]); optimalerroreq.remove(pickedeq); erroreq.remove(pickedeq); if(erroreq.length < 1) break; erroramt--; } if (self.layout == ~DECK~) { Deck.advance(0.8); } },,,,,,,
tickets,Tickets,ticket,you've sold [ticket]<value>_billion tickets. good job,YES,NO,NO,NO,NO,,,,,,,,,,,
